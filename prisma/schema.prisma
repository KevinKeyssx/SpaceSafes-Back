// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    // output   = "../generated/prisma"
}


datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}


enum StatusPayment {
    PENDING
    COMPLETED
    CANCELLED
}


model Payment {
    id              String   @id @default(uuid())
    userId          String
    date            DateTime
    // amount          Float
    createdAt       DateTime @default(now())
    // updatedAt       DateTime @updatedAt

    paymentDetails PaymentDetail[]
}


model Expense {
    id          String    @id @default(uuid())
    userId      String?

    name        String    // Ej: "Hogar", "Entretenimiento"
    description String?

    services Service[]

    @@unique([name, userId]) // Nombre único por usuario
    @@index([name, userId]) // Optimizar búsquedas
}


model Service {
    id          String    @id @default(uuid())
    userId      String?

    name        String    // Ej: "Netflix", "Supermercado"
    description String?

    expense       Expense     @relation(fields: [expenseId], references: [id])
    expenseId     String

    paymentServices PaymentService[]

    @@index([expenseId, userId]) // Optimizar búsquedas
    @@unique([name, expenseId, userId]) // Nombre único por usuario
}


model PaymentService {
    id              String   @id @default(uuid())
    userId          String
    amount          Float
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    expirationDate  DateTime?
    description     String?

    serviceId String
    service Service @relation(fields: [serviceId], references: [id])

    navlyId String? // Nuevo campo para la relación con NavlyBalance
    navly   Navly?  @relation(fields: [navlyId], references: [id]) // Relación con NavlyBalance

    paymentDetails PaymentDetail[]

    @@index([userId, serviceId, navlyId])
}


model PaymentDetail {
    id              String   @id @default(uuid())
    userId          String
    amount          Float
    status          StatusPayment
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    balanceId String // Nuevo campo para la relación con Balance
    balance   Balance @relation(fields: [balanceId], references: [id]) // Relación con Balance

    paymentId String // Nuevo campo para la relación con Payment
    payment   Payment  @relation(fields: [paymentId], references: [id]) // Relación con Payment

    paymentServiceId String // Nuevo campo para la relación con PaymentService
    paymentService   PaymentService  @relation(fields: [paymentServiceId], references: [id]) // Relación con PaymentService

    @@index([userId, paymentId, paymentServiceId])
}


model Account {
    id              String   @id @default(uuid())
    userId          String
    name            String?
    username        String
    password        String
    createdAt       DateTime @default(now())
    updatedAt       DateTime? @updatedAt

    isFavorite      Boolean @default(false)

    navly Navly[]

    @@index([username, userId ])
}


model Navly {
    id              String   @id @default(uuid())
    userId          String

    name            String?
    url             String
    avatar          String?
    description     String?
    createdAt       DateTime @default(now())
    updatedAt       DateTime? @updatedAt

    lastViewed      DateTime @default(now())
    stars           Int @default(0)
    isFavorite      Boolean @default(false)

    accountId String?
    account     Account? @relation(fields: [accountId], references: [id])

    navlyBalances NavlyBalance[]
    paymentServices PaymentService[]

    @@index([name, userId])
    @@unique([url, userId])
}


enum TypeBalance {
    CREDIT
    DEBIT
    BANK_ACCOUNT
    CASH
    FREELANCE
    SAVINGS
    INVESTMENT
    OTHER
}

enum TypeCard {
    VISA
    VISA_ELECTRON
    MASTERCARD
    AMERICAN_EXPRESS
    DISCOVER
    JCB
    DINERS_CLUB
    UNIONPAY
    MAESTRO
    ELO
    HIPERCARD
    AURA
}


model Balance {
    id              String   @id @default(uuid())
    userId          String
    name            String
    type            TypeBalance

    typeCard            TypeCard?
    balance             Float
    cardNumber          String? @unique
    accountNumber       String? @unique
    bankName            String?
    expirationDate      DateTime?
    verificationNumber  String?
    lastPayment         DateTime?

    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt

    navlyBalances       NavlyBalance[]
    paymentDetails      PaymentDetail[]

    @@index([name, userId])
}


model NavlyBalance {
    id        String   @id @default(uuid())
    userId    String

    principal Boolean @default(false)
    expirationDate  DateTime?

    navlyId   String
    navly     Navly    @relation(fields: [navlyId], references: [id])

    balanceId String
    balance   Balance  @relation(fields: [balanceId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([navlyId, balanceId, userId])
    @@unique([navlyId, balanceId, userId])
}


enum LevelNote {
    HIGH
    MEDIUM
    LOW
    NONE
}


model Note {
    id              String   @id @default(uuid())
    userId          String
    title           String
    content         String
    level           LevelNote
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    typeNoteId      String?
    typeNote        TypeNote? @relation(fields: [typeNoteId], references: [id])

    @@index([title, userId])
}

model TypeNote {
    id              String   @id @default(uuid())
    userId          String
    name            String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    notes           Note[]

    @@index([name, userId])
}
